{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hey There, I am Akash Kandasamy (pronouced as \"Akash Kandhasamy\"), working in Zoho as Member of Technical Staff . Passed out from Motital Nehru National Institute of Technology, Allahabad (MNNIT). A Son to B-E-A-utiful Parents. Dyslexic about right and left. Severe anemia patient (I am being sarcastic here). This is a no-fluff website, no fancy framework, pure HTML, JS, CSS. -- So feel free check source code. Love Grinding in computers, learning about system design, and taking on open-source projects to crack them open and explore. \\(\\heartsuit\\) Math, mainly Geomentry, Arithemetic & Geometric Progresstion and Permuation & Combination. All Human Generated.","title":"About Me"},{"location":"TODO/","text":"Dark Mode for Navigation Navigation for Mobile, and other Small Device Last Update Date & Time to automattically update over every deploy","title":"Todo"},{"location":"CSES/cpp-tips/","text":"In myprettyprint.hpp , Support Only Upto 5 Args #ifndef ONLINE_JUDGE #include \"myprettyprint.hpp\" template <typename T> using mat = vector<vector<T>>; template <typename T> void show_mat_graph(mat<T> graph){ for(auto vec: graph){ for(auto k: vec){ cout << k << \" \"; } cout << endl; } cout << endl; } #else #define print(...) void show_mat_graph(...) #endif template <class T1, class T2> ostream &operator<<(ostream &os, const pair<T1, T2> &p) { return os << '{' << p.first << \", \" << p.second << '}'; } template <class T, class = decay_t<decltype(*begin(declval<T>()))>, class = enable_if_t<!is_same<T, string>::value>> ostream &operator<<(ostream &os, const T &c) { os << '['; for (auto it = c.begin(); it != c.end(); ++it) os << &\", \"[2 * (it == c.begin())] << *it; return os << ']'; } //support up to 5 args #define _NTH_ARG(_1, _2, _3, _4, _5, _6, N, ...) N #define _FE_0(_CALL, ...) #define _FE_1(_CALL, x) _CALL(x) #define _FE_2(_CALL, x, ...) _CALL(x) _FE_1(_CALL, __VA_ARGS__) #define _FE_3(_CALL, x, ...) _CALL(x) _FE_2(_CALL, __VA_ARGS__) #define _FE_4(_CALL, x, ...) _CALL(x) _FE_3(_CALL, __VA_ARGS__) #define _FE_5(_CALL, x, ...) _CALL(x) _FE_4(_CALL, __VA_ARGS__) #define FOR_EACH_MACRO(MACRO, ...) \\ _NTH_ARG(dummy, ##__VA_ARGS__, _FE_5, _FE_4, _FE_3, _FE_2, _FE_1, _FE_0) \\ (MACRO, ##__VA_ARGS__) //Change output format here #define out(x) #x \" = \" << x << \"; \" #define print(...) \\ cerr << \"Line \" << __LINE__ << \": \" FOR_EACH_MACRO(out, __VA_ARGS__) << \"\\n\" https://codeforces.com/blog/entry/15643 https://codeforces.com/blog/entry/15547 https://codeforces.com/blog/entry/74684 https://codeforces.com/blog/entry/925 https://codeforces.com/blog/entry/112926","title":"CPP Tips and Tricks"},{"location":"CSES/main/","text":"Codeforce Blog CSES Solution CSES Solution II CSES Solution III","title":"Resource for CSES"},{"location":"Data%20Structures%20%26%20Algorithms/Roadmap/","text":"Grind 75 / Technical Interview Handbook Leetcode Question By Patterns List Of Question Roadmap Group by Companies Github Links Interview Awesom Leetcode Resources Awesome Algorithms Lectures & Course Material MIT Introduction to Algorithms MIT Introduction to Algorithms II MIT Design of Algorithms Course Material Priceton Lecture Common Algorithms","title":"Roadmap"},{"location":"Data%20Structures%20%26%20Algorithms/Roadmap/#github-links","text":"Interview Awesom Leetcode Resources Awesome Algorithms","title":"Github Links"},{"location":"Data%20Structures%20%26%20Algorithms/Roadmap/#lectures-course-material","text":"MIT Introduction to Algorithms MIT Introduction to Algorithms II MIT Design of Algorithms Course Material Priceton Lecture","title":"Lectures &amp; Course Material"},{"location":"Data%20Structures%20%26%20Algorithms/Roadmap/#common-algorithms","text":"","title":"Common Algorithms"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/A-Introduction/","text":"Website To Visualize Graphs Graph Theory is the mathematical theory of properties and application of graph networks Types of Graph Undirectied Graph: A Graph in which edges have no direction. the edge \\((u, v) \\equiv (v, u)\\) Directed Graph: A Graph in which edges have direction. Weighted Graph: A Graph in which edge have weight, ie edge is represented by \\((u, v, w)\\) . Special Graph Tree : A Tree is unidirecteced graph with no cycles. equivaltenly, If \\(N = \\text{Number of Nodes}\\) and \\(E = \\text{Number of Edges}\\) , then \\(E = N - 1\\) Rooted Tree : A Rooted Tree is tree with a designated root. edges point away \\(\\rightarrow\\) arboresence or out-tree edges point inward \\(\\rightarrow\\) anti-arboresence or in-tree Directed Acylic Graph : or Simply DAG, Directed Graph with No Cycles Bipartite Graph : A Bipartite graph is one whose edge \\((u, v)\\) can be split so that, the can form two independent graphs such that eery edge connect every node in graph \\(U\\) and \\(V\\) Complete Graph : A Completed graph is one where there is unqiue edge between every pair of nodes. or Every node can be accessed from every other node in the graph. Representing Graph Adjacency Matrix : for example \\[ M = \\begin{bmatrix} 0 & 3 & 1 & 10 \\\\ 6 & 0 & 5 & 5 \\\\ 1 & 4 & 0 & 3 \\\\ 4 & 6 & 4 & 0 \\end{bmatrix} \\] where \\(M[u][v] = w\\) and \\(w\\) is weight of the edge \\(u \\rightarrow v\\) . and \\(M[u][u] = 0\\) , as there is no weight for the edge \\(u \\rightarrow u\\) . Pros Cons Space efficient for represent graph Requires \\(O(n^2)\\) Edge Weight Lookup is \\(O(1)\\) Iterating over all edges takes \\(O(v^2)\\) Simplest Graph Representation Adjanceny List : \\[ M(A) = [(B, 1), (C, 2)] \\\\ M(B) = [(C, 3)] \\\\ M(C) = [(A, 3), (D, 2), (B, 4)] \\\\ \\] Pros Cons Great for sparse graph Not Effiecient for denser graph Iterating over all edges of a node is effiecient Edge weight lookup is \\(O(E)\\) where \\(E = \\text{No of Edges}\\) Edge List : Unordeded List of edges represent in triplets. \\[ M = [(A, B, 1), (A, C, 2), (A, B, 2), (B, C, 3), (C, C, 8)] \\] Pros Cons Space eff for representing sparse graph Not effiecient for denser graph Iterating over all edges of a node is effiecient Edge weight lookup is \\(O(E)\\) where \\(E = \\text{No of Edges}\\) Very simple structure PS: These are notes taken from above Video Series Playlist.","title":"A - Introduction"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/A-Introduction/#types-of-graph","text":"Undirectied Graph: A Graph in which edges have no direction. the edge \\((u, v) \\equiv (v, u)\\) Directed Graph: A Graph in which edges have direction. Weighted Graph: A Graph in which edge have weight, ie edge is represented by \\((u, v, w)\\) .","title":"Types of Graph"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/A-Introduction/#special-graph","text":"Tree : A Tree is unidirecteced graph with no cycles. equivaltenly, If \\(N = \\text{Number of Nodes}\\) and \\(E = \\text{Number of Edges}\\) , then \\(E = N - 1\\) Rooted Tree : A Rooted Tree is tree with a designated root. edges point away \\(\\rightarrow\\) arboresence or out-tree edges point inward \\(\\rightarrow\\) anti-arboresence or in-tree Directed Acylic Graph : or Simply DAG, Directed Graph with No Cycles Bipartite Graph : A Bipartite graph is one whose edge \\((u, v)\\) can be split so that, the can form two independent graphs such that eery edge connect every node in graph \\(U\\) and \\(V\\) Complete Graph : A Completed graph is one where there is unqiue edge between every pair of nodes. or Every node can be accessed from every other node in the graph.","title":"Special Graph"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/A-Introduction/#representing-graph","text":"Adjacency Matrix : for example \\[ M = \\begin{bmatrix} 0 & 3 & 1 & 10 \\\\ 6 & 0 & 5 & 5 \\\\ 1 & 4 & 0 & 3 \\\\ 4 & 6 & 4 & 0 \\end{bmatrix} \\] where \\(M[u][v] = w\\) and \\(w\\) is weight of the edge \\(u \\rightarrow v\\) . and \\(M[u][u] = 0\\) , as there is no weight for the edge \\(u \\rightarrow u\\) . Pros Cons Space efficient for represent graph Requires \\(O(n^2)\\) Edge Weight Lookup is \\(O(1)\\) Iterating over all edges takes \\(O(v^2)\\) Simplest Graph Representation Adjanceny List : \\[ M(A) = [(B, 1), (C, 2)] \\\\ M(B) = [(C, 3)] \\\\ M(C) = [(A, 3), (D, 2), (B, 4)] \\\\ \\] Pros Cons Great for sparse graph Not Effiecient for denser graph Iterating over all edges of a node is effiecient Edge weight lookup is \\(O(E)\\) where \\(E = \\text{No of Edges}\\) Edge List : Unordeded List of edges represent in triplets. \\[ M = [(A, B, 1), (A, C, 2), (A, B, 2), (B, C, 3), (C, C, 8)] \\] Pros Cons Space eff for representing sparse graph Not effiecient for denser graph Iterating over all edges of a node is effiecient Edge weight lookup is \\(O(E)\\) where \\(E = \\text{No of Edges}\\) Very simple structure PS: These are notes taken from above Video Series Playlist.","title":"Representing Graph"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/B-Common-Problems/","text":"Todo","title":"Common Graph Theory Problems"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/Problems/A%20-%20Dugen%20Master/","text":"source: problem-link You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides. Is an escape possible? If yes, how long will it take? Sample Input 3 4 5 S.... .###. .##.. ###.# ##### ##### ##.## ##... ##### ##### #.### ####E 1 3 3 S## #E# ### 0 0 0 Sample Output Escaped in 11 minute(s). Trapped! Approach Use, BFS in 3D Vector to find the shorted path between S and E or As mention in video, it could solved having by each queue for every diminention. We will try to find to out an optimal one based in pros and cons. s One unique catch here is that array is given in 3D, so for 2D if there are 4 Vector for Iterating, 3D has 6 Vectors \\[\\begin{pmatrix} -1 & 0 & 0 \\\\ +1 & 0 & 0 \\\\ 0 & -1 & 0 \\\\ 0 & +1 & 0 \\\\ 0 & 0 & -1 \\\\ 0 & 0 & +1 \\\\ \\end{pmatrix}\\] or simpily: constexpr int DX6[] = {-1, 1, 0, 0, 0, 0}; constexpr int DY6[] = { 0, 0, -1, 1, 0, 0}; constexpr int DZ6[] = { 0, 0, 0, 0,-1, 1}; Simple BFS with 3D Vectors would solve the problem. #include <iostream> #include <vector> #include <list> #include <string> #include <queue> #include <utility> #include <tuple> using namespace std; constexpr int DX6[] = {-1, 1, 0, 0, 0, 0}; constexpr int DY6[] = { 0, 0, -1, 1, 0, 0}; constexpr int DZ6[] = { 0, 0, 0, 0,-1, 1}; bool is_inside(int tx, int ty, int tz, int r, int c, int level) { if (tx < 0 or ty < 0 or tz < 0) return false; if (tx >= r or ty >= c or tz >= level) return false; return true; } void solve(int level, int r, int c) { using pt = tuple<int, int, int>; using vc = vector<char>; vector<vector<vector<char>>> box(r, vector<vector<char>>(c, vector<char>(level, '.'))); vector<vector<vector<bool>>> vis(r, vector<vector<bool>>(c, vector<bool>(level))); pt start, end; for(int z=0;z<level;z++){ for(int x=0;x<r;x++){ for(int y=0;y<c;y++){ char k; cin >> k; if (k == 'S') start = {x, y, z}; if (k == 'E') end = {x, y, z}; box[x][y][z] = k; } } } queue<pt> q; q.push(start); int res = 0; while (!q.empty()) { int size = q.size(); while (size--){ auto [x, y, z] = q.front(); q.pop(); auto [ex, ey, ez] = end; if (x == ex and y == ey && z == ez) { cout << \"Escaped in \" << res << \" minute(s).\" << endl; return; } for(int k=0;k<6;k++){ int dx = x + DX6[k]; int dy = y + DY6[k]; int dz = z + DZ6[k]; if (is_inside(dx, dy, dz, r, c, level)){ if (box[dx][dy][dz] != '#' and !vis[dx][dy][dz]){ q.push({dx, dy, dz}); vis[dx][dy][dz] = true; } } } } res++; } cout << \"Trapped!\" << endl; } int main() { while(true){ int level, r, c; cin >> level >> r >> c; if(!level and !r and !c) break; solve(level, r, c); } } TODO Write the same approach using queues for each dimension.","title":"A - Dungeon master"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/Problems/A%20-%20Dugen%20Master/#sample-input","text":"3 4 5 S.... .###. .##.. ###.# ##### ##### ##.## ##... ##### ##### #.### ####E 1 3 3 S## #E# ### 0 0 0","title":"Sample Input"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/Problems/A%20-%20Dugen%20Master/#sample-output","text":"Escaped in 11 minute(s). Trapped!","title":"Sample Output"},{"location":"Data%20Structures%20%26%20Algorithms/Graphs/Problems/A%20-%20Dugen%20Master/#approach","text":"Use, BFS in 3D Vector to find the shorted path between S and E or As mention in video, it could solved having by each queue for every diminention. We will try to find to out an optimal one based in pros and cons. s One unique catch here is that array is given in 3D, so for 2D if there are 4 Vector for Iterating, 3D has 6 Vectors \\[\\begin{pmatrix} -1 & 0 & 0 \\\\ +1 & 0 & 0 \\\\ 0 & -1 & 0 \\\\ 0 & +1 & 0 \\\\ 0 & 0 & -1 \\\\ 0 & 0 & +1 \\\\ \\end{pmatrix}\\] or simpily: constexpr int DX6[] = {-1, 1, 0, 0, 0, 0}; constexpr int DY6[] = { 0, 0, -1, 1, 0, 0}; constexpr int DZ6[] = { 0, 0, 0, 0,-1, 1}; Simple BFS with 3D Vectors would solve the problem. #include <iostream> #include <vector> #include <list> #include <string> #include <queue> #include <utility> #include <tuple> using namespace std; constexpr int DX6[] = {-1, 1, 0, 0, 0, 0}; constexpr int DY6[] = { 0, 0, -1, 1, 0, 0}; constexpr int DZ6[] = { 0, 0, 0, 0,-1, 1}; bool is_inside(int tx, int ty, int tz, int r, int c, int level) { if (tx < 0 or ty < 0 or tz < 0) return false; if (tx >= r or ty >= c or tz >= level) return false; return true; } void solve(int level, int r, int c) { using pt = tuple<int, int, int>; using vc = vector<char>; vector<vector<vector<char>>> box(r, vector<vector<char>>(c, vector<char>(level, '.'))); vector<vector<vector<bool>>> vis(r, vector<vector<bool>>(c, vector<bool>(level))); pt start, end; for(int z=0;z<level;z++){ for(int x=0;x<r;x++){ for(int y=0;y<c;y++){ char k; cin >> k; if (k == 'S') start = {x, y, z}; if (k == 'E') end = {x, y, z}; box[x][y][z] = k; } } } queue<pt> q; q.push(start); int res = 0; while (!q.empty()) { int size = q.size(); while (size--){ auto [x, y, z] = q.front(); q.pop(); auto [ex, ey, ez] = end; if (x == ex and y == ey && z == ez) { cout << \"Escaped in \" << res << \" minute(s).\" << endl; return; } for(int k=0;k<6;k++){ int dx = x + DX6[k]; int dy = y + DY6[k]; int dz = z + DZ6[k]; if (is_inside(dx, dy, dz, r, c, level)){ if (box[dx][dy][dz] != '#' and !vis[dx][dy][dz]){ q.push({dx, dy, dz}); vis[dx][dy][dz] = true; } } } } res++; } cout << \"Trapped!\" << endl; } int main() { while(true){ int level, r, c; cin >> level >> r >> c; if(!level and !r and !c) break; solve(level, r, c); } } TODO Write the same approach using queues for each dimension.","title":"Approach"},{"location":"Design/CSS/","text":"CSS Reference Cos and Sin in CSS","title":"CSS Collection"},{"location":"Graphic%20Design/generative-art/","text":"Chuan Generative Code -- CSS Doodle CSS Animation With Offset Path","title":"Generative Art"},{"location":"Mac%20OS%20Apps/apps/","text":"Pasty : Clipboard Manager, Free VS Code : Code Editor, Free Ghostty : Terminal Emulator, Free Arc / Chrome ; Broswer Spotify Postman [VLC Play]: For Movies [QBit Torrent]: For Downloading Movies [Keyboard Clearner Tool] DBWeaver Obsdian Minibrain - Todo, Nodes Planner Dozer : Menubar Maintaince Numi : Better Calculator AppClearner: For Uninstalling and Removing Left Over Application Files Velja: For opening youtube.com in idna browser, and rest in default, AirTraffic Basically Plain Text Editor: Good Quick Note Editor Zed: Sometimes, If I feel bored with VS Code Shotr: For Taking Screenshot Notion: For Mataining Internet Bookmarks ChatGPT: Off Course Karabiner-Elements: For Customizing KetStrokes","title":"Apps That I Use Daily"},{"location":"Mathematics/Permutation/Material/","text":"Class 11 - Chapter 6 -- Best For Learning both Permutation and Combination","title":"Materials"},{"location":"Portfolios/Design/","text":"CYD Stumpel Pixel Ambaght","title":"Design Portfolio"},{"location":"Python/namespace/","text":"A Python namespaces is a mapping from names to objects. It works like a dictionary where keys are object names and values are the objects themselves. A namespace is a container that holds the currently defined symbolic names and the objects each name references. These namespaces have differing lifetimes. As Python executes a program, it creates namespaces as necessary and removes them when it no longer needs them. Four Different Namespace Available: Built-in Local Gobal Enclosing or nonlocal Built-In Namespace ex. Exception, Primitive Types, sort, reverse etc. >>> dir(__builtins__) [ 'ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', ... 'super', 'tuple', 'type', 'vars', 'zip' ] Global Namespace The global namespace contains the names defined at the module level. Python creates a main global namespace when the main program\u2019s body starts. Globals are seperate to module Local Namespace function level namespace on enter of function -> create a namespace, on exit of a function -> delete the namespace. Enclosing or Non Local Namespace >>> global_variable = \"global\" >>> def outer_func(): ... # Nonlocal scope ... nonlocal_variable = \"nonlocal\" ... def inner_func(): ... # Local scope ... local_variable = \"local\" ... print(f\"Hi from the '{local_variable}' scope!\") ... print(f\"Hi from the '{nonlocal_variable}' scope!\") ... print(f\"Hi from the '{global_variable}' scope!\") ... inner_func() ... >>> outer_func() Hi from the 'local' scope! Hi from the 'nonlocal' scope! Hi from the 'global' scope! The LEGB Rule for Searching Name LOCAL > ENCLOSING > GLOBAL > BUILTIN","title":"Namespaces"},{"location":"Python/namespace/#built-in-namespace","text":"ex. Exception, Primitive Types, sort, reverse etc. >>> dir(__builtins__) [ 'ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', ... 'super', 'tuple', 'type', 'vars', 'zip' ]","title":"Built-In Namespace"},{"location":"Python/namespace/#global-namespace","text":"The global namespace contains the names defined at the module level. Python creates a main global namespace when the main program\u2019s body starts. Globals are seperate to module","title":"Global Namespace"},{"location":"Python/namespace/#local-namespace","text":"function level namespace on enter of function -> create a namespace, on exit of a function -> delete the namespace.","title":"Local Namespace"},{"location":"Python/namespace/#enclosing-or-non-local-namespace","text":">>> global_variable = \"global\" >>> def outer_func(): ... # Nonlocal scope ... nonlocal_variable = \"nonlocal\" ... def inner_func(): ... # Local scope ... local_variable = \"local\" ... print(f\"Hi from the '{local_variable}' scope!\") ... print(f\"Hi from the '{nonlocal_variable}' scope!\") ... print(f\"Hi from the '{global_variable}' scope!\") ... inner_func() ... >>> outer_func() Hi from the 'local' scope! Hi from the 'nonlocal' scope! Hi from the 'global' scope!","title":"Enclosing or Non Local Namespace"},{"location":"Python/namespace/#the-legb-rule-for-searching-name","text":"LOCAL > ENCLOSING > GLOBAL > BUILTIN","title":"The LEGB Rule for Searching Name"},{"location":"Queue/read-queue/","text":"Postgres SQL Must Read Blog -- The Ultimate Guide to Data Structures and Algorithms (DSA) TCP Server in Zig Three Point Weekely -- Seem Nice Writing about Marketing, Check Out. Git Notes - Most Unloved Feature of Git CRDT - Conflict-free Replicated Data Type Ten Commands in GO Some Concurrency in GO Sinals in GO Virtual DOM is pure overhead at Svelte by Rick Harris LEARN RUST and Contribute to Zed Code Editor link What Makes System Calls Expensive: A Linux Internals Deep Dive Design Boiled down: fixing the variable font inheritance problem CSS Boilerplate Web Accessibilty","title":"Read Queue"},{"location":"Queue/read-queue/#design","text":"Boiled down: fixing the variable font inheritance problem CSS Boilerplate Web Accessibilty","title":"Design"},{"location":"Queue/watch-queue/","text":"General Live Overflow Tally Form RabbitMQ Khepri: Replacing Mnesia in RabbitMQ by Michael Davis | Code BEAM Europe 2023 Distributed Systems GopherCon 2023: Philip O'Toole - Build Your Own Distributed System Using Go - YouTube Lock-free Atomic Shared Pointers Without a Split Reference Count How Database Works System Design Python Design Pressure: The Invisible Hand That Shapes Your Code - Hynek Schlawack Go Link Link Design Layout and Reading Order by Rachel Andrew Source: CSS Day","title":"Watch Queue"},{"location":"Queue/watch-queue/#general","text":"Live Overflow Tally Form","title":"General"},{"location":"Queue/watch-queue/#rabbitmq","text":"Khepri: Replacing Mnesia in RabbitMQ by Michael Davis | Code BEAM Europe 2023","title":"RabbitMQ"},{"location":"Queue/watch-queue/#distributed-systems","text":"GopherCon 2023: Philip O'Toole - Build Your Own Distributed System Using Go - YouTube Lock-free Atomic Shared Pointers Without a Split Reference Count How Database Works System Design","title":"Distributed Systems"},{"location":"Queue/watch-queue/#python","text":"Design Pressure: The Invisible Hand That Shapes Your Code - Hynek Schlawack","title":"Python"},{"location":"Queue/watch-queue/#go","text":"Link Link","title":"Go"},{"location":"Queue/watch-queue/#design","text":"Layout and Reading Order by Rachel Andrew Source: CSS Day","title":"Design"},{"location":"Read%20List/Tect/","text":"Why I stopped using AI code editors by: Luciano Nooijen source: The Primegen A Few Takeawys 1. Doing a smaller thing again and again make the harder thing easy. 2. Using AI Generated Code bring more unknown security issues with them. 3. While you may starting using AI for free, but sooner or later they might charge you for that 4. Thinking, of famous quote If something is free, then your the product The Ultimate Guide to Data Structures and Algorithms (DSA) by: Ethan McCue A Few Takeawys 1. I Got to know Awesome MIT Courses, 6.0006, 6.046j. 2. A Good Book, Which I Plan to Read, \"Algorithm Design\" by Jon Kleinberg and \u00c9va Tardos. Experience of Writing a Book by: Teiva Harsanyi A Few Takeawys 1. Nice Writing, Very Detailed, Feels Like I can visbily see whats happening. 2. Very Open, Mentioning about Royalties -> Gaining Trust. 3. He wrote in such way the scope was wider. Learn You Some Erlang by: Fred Hebert A Lot Takeawys 1. He Goes: Walking on water and developing software from a specification are easy if both are frozen. 2. Very Fun, Easy Understanble Tech Docs, ever read 80% React Won by Default \u2013 And It's Killing Frontend Innovation by: Loren Stewart A Lot Takeawys 1. Frontend Framework Evaluation Checklist A. Assess Performance Needs: Evaluate metrics like startup time, update efficiency, and bundle size. B. Team Skills and Learning Curve: Consider existing expertise but factor in migration paths. C. Scaling and Cost of Ownership: Calculate long-term costs, including maintenance, dependency management, and tech debt. Alternatives often reduce runtime overhead, lowering hosting costs and improving scalability. D. Ecosystem Fit: Balance maturity with innovation; pilot in non-critical areas to test migration feasibility and ROI. 2. Monoculture slows web evolution when one framework\u2019s constraints become de facto limits. 80%","title":"Tech Blogs"}]}